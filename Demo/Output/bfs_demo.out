Wathen: nx 4 ny 4 n 65 nz 817 method 0, time: 0.000 sec
number of nodes: 65

method 5: vector assign and reduce:
BFS time in seconds:       0.000248
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000075
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000075
nodes reachable from node 0: 65 out of 65
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000057
nodes reachable from node 0: 65 out of 65
max BFS level: 5
random 5 by 5, nz: 23, method 1 time 0.000 sec
number of nodes: 5

method 5: vector assign and reduce:
BFS time in seconds:       0.000206
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000045
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000048
nodes reachable from node 0: 5 out of 5
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000032
nodes reachable from node 0: 5 out of 5
max BFS level: 2
ntuples: 3
nrows 3 ncols 3
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000060
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000046
matrix 3 by 3, 3 entries, from stdin
number of nodes: 3

method 5: vector assign and reduce:
BFS time in seconds:       0.000158
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 5: same but check each result
BFS time in seconds:       0.000036
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 6: apply unary operator
BFS time in seconds:       0.000025
nodes reachable from node 0: 1 out of 3
max BFS level: 1

method 6: same but check each result
BFS time in seconds:       0.000022
nodes reachable from node 0: 1 out of 3
max BFS level: 1
ntuples: 8
nrows 4 ncols 4
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000065
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000069
matrix 4 by 4, 8 entries, from stdin
number of nodes: 4

method 5: vector assign and reduce:
BFS time in seconds:       0.000215
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000035
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000032
nodes reachable from node 0: 2 out of 4
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000023
nodes reachable from node 0: 2 out of 4
max BFS level: 2

------------------- this fails:

=================================================================
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Monoid_new_INT32 (&monoid, op, identity)
Identity type [int32_t]
must be identical to monoid operator z=or(x,y) of type [bool]
=================================================================


------------------- this is OK:

=================================================================
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2018, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University
SuiteSparse:GraphBLAS version: 2.1.0  Date: Oct 14, 2018
SuiteSparse:GraphBLAS, Copyright 2017-2018, Timothy A. Davis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use SuiteSparse:GraphBLAS except in compliance with the
License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Conforms to GraphBLAS spec:    1.2.0  Date: May 18, 2018
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang.  Based on "GraphBLAS Mathematics" by
Jeremy Kepner.  See also "Graph Algorithms in the Language of
Linear Algebra", edited by J. Kepner and J. Gilbert, SIAM, 2011.
=================================================================
GraphBLAS status: GrB_SUCCESS
=================================================================

ntuples: 10
nrows 4 ncols 4
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000072
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000062
matrix 4 by 4, 14 entries, from stdin
number of nodes: 4

method 5: vector assign and reduce:
BFS time in seconds:       0.000182
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 5: same but check each result
BFS time in seconds:       0.000052
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 6: apply unary operator
BFS time in seconds:       0.000098
nodes reachable from node 0: 4 out of 4
max BFS level: 2

method 6: same but check each result
BFS time in seconds:       0.000071
nodes reachable from node 0: 4 out of 4
max BFS level: 2

------------------- this fails:

=================================================================
GraphBLAS error: GrB_DOMAIN_MISMATCH
function: GrB_Monoid_new_INT32 (&monoid, op, identity)
Identity type [int32_t]
must be identical to monoid operator z=or(x,y) of type [bool]
=================================================================


------------------- this is OK:

=================================================================
SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2018, All Rights Reserved.
http://suitesparse.com  Dept of Computer Sci. & Eng, Texas A&M University
SuiteSparse:GraphBLAS version: 2.1.0  Date: Oct 14, 2018
SuiteSparse:GraphBLAS, Copyright 2017-2018, Timothy A. Davis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use SuiteSparse:GraphBLAS except in compliance with the
License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
Conforms to GraphBLAS spec:    1.2.0  Date: May 18, 2018
GraphBLAS C API, by Aydin Buluc, Timothy Mattson, Scott McMillan,
Jose' Moreira, Carl Yang.  Based on "GraphBLAS Mathematics" by
Jeremy Kepner.  See also "Graph Algorithms in the Language of
Linear Algebra", edited by J. Kepner and J. Gilbert, SIAM, 2011.
=================================================================
GraphBLAS status: GrB_SUCCESS
=================================================================

ntuples: 8
nrows 4 ncols 3
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000065
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000070
matrix 7 by 7, 16 entries, from stdin
number of nodes: 7

method 5: vector assign and reduce:
BFS time in seconds:       0.000140
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000049
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000053
nodes reachable from node 0: 7 out of 7
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000040
nodes reachable from node 0: 7 out of 7
max BFS level: 5
ntuples: 438
nrows 219 ncols 85
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000074
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000109
matrix 304 by 304, 876 entries, from stdin
number of nodes: 304

method 5: vector assign and reduce:
BFS time in seconds:       0.000336
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 5: same but check each result
BFS time in seconds:       0.000218
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 6: apply unary operator
BFS time in seconds:       0.000178
nodes reachable from node 0: 304 out of 304
max BFS level: 17

method 6: same but check each result
BFS time in seconds:       0.000161
nodes reachable from node 0: 304 out of 304
max BFS level: 17
ntuples: 224
nrows 48 ncols 48
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000070
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000064
matrix 48 by 48, 400 entries, from stdin
number of nodes: 48

method 5: vector assign and reduce:
BFS time in seconds:       0.000268
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.000064
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.000057
nodes reachable from node 0: 48 out of 48
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.000045
nodes reachable from node 0: 48 out of 48
max BFS level: 4
ntuples: 147631
nrows 4884 ncols 4884
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.003589
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.003955
matrix 4884 by 4884, 290378 entries, from stdin
number of nodes: 4884

method 5: vector assign and reduce:
BFS time in seconds:       0.002719
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 5: same but check each result
BFS time in seconds:       0.002229
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 6: apply unary operator
BFS time in seconds:       0.002183
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44

method 6: same but check each result
BFS time in seconds:       0.001975
nodes reachable from node 0: 4810 out of 4884
max BFS level: 44
ntuples: 1069
nrows 183 ncols 183
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000058
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000067
matrix 183 by 183, 1585 entries, from stdin
number of nodes: 183

method 5: vector assign and reduce:
BFS time in seconds:       0.000237
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.000101
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.000084
nodes reachable from node 0: 183 out of 183
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.000076
nodes reachable from node 0: 183 out of 183
max BFS level: 4
ntuples: 123
nrows 32 ncols 31
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000053
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000057
matrix 63 by 63, 246 entries, from stdin
number of nodes: 63

method 5: vector assign and reduce:
BFS time in seconds:       0.000197
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 5: same but check each result
BFS time in seconds:       0.000088
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: apply unary operator
BFS time in seconds:       0.000081
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: same but check each result
BFS time in seconds:       0.000066
nodes reachable from node 0: 63 out of 63
max BFS level: 6
ntuples: 123
nrows 31 ncols 32
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000070
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000103
matrix 63 by 63, 246 entries, from stdin
number of nodes: 63

method 5: vector assign and reduce:
BFS time in seconds:       0.000162
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 5: same but check each result
BFS time in seconds:       0.000054
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: apply unary operator
BFS time in seconds:       0.000083
nodes reachable from node 0: 63 out of 63
max BFS level: 6

method 6: same but check each result
BFS time in seconds:       0.000051
nodes reachable from node 0: 63 out of 63
max BFS level: 6
ntuples: 102
nrows 27 ncols 51
time to prune self-edges:     0.000004
time to build the graph with GrB_Matrix_build:     0.000069
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.000076
matrix 78 by 78, 204 entries, from stdin
number of nodes: 78

method 5: vector assign and reduce:
BFS time in seconds:       0.000215
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 5: same but check each result
BFS time in seconds:       0.000086
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 6: apply unary operator
BFS time in seconds:       0.000107
nodes reachable from node 0: 78 out of 78
max BFS level: 10

method 6: same but check each result
BFS time in seconds:       0.000092
nodes reachable from node 0: 78 out of 78
max BFS level: 10
ntuples: 49920
nrows 492 ncols 490
time to prune self-edges:     0.000005
time to build the graph with GrB_Matrix_build:     0.000820
make symmetric
A = [0 C ; C' 0], a bipartite graph
time to construct augmented system:     0.003916
matrix 982 by 982, 99840 entries, from stdin
number of nodes: 982

method 5: vector assign and reduce:
BFS time in seconds:       0.000600
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000438
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000389
nodes reachable from node 0: 933 out of 982
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000336
nodes reachable from node 0: 933 out of 982
max BFS level: 5
ntuples: 299
nrows 67 ncols 67
time to prune self-edges:     0.000006
time to build the graph with GrB_Matrix_build:     0.000078
make symmetric
A = (C+C')/2
A = (C+C')/2 time     0.000049
matrix 67 by 67, 576 entries, from stdin
number of nodes: 67

method 5: vector assign and reduce:
BFS time in seconds:       0.000198
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.000083
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.000075
nodes reachable from node 0: 67 out of 67
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.000065
nodes reachable from node 0: 67 out of 67
max BFS level: 5
Wathen: nx 200 ny 200 n 120801 nz 1883201 method 0, time: 0.327 sec
number of nodes: 120801

method 5: vector assign and reduce:
BFS time in seconds:       0.145275
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 5: same but check each result
BFS time in seconds:       0.144356
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 6: apply unary operator
BFS time in seconds:       0.087127
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201

method 6: same but check each result
BFS time in seconds:       0.092304
nodes reachable from node 0: 120801 out of 120801
max BFS level: 201
random 10000 by 10000, nz: 199764, method 0 time 0.053 sec
number of nodes: 10000

method 5: vector assign and reduce:
BFS time in seconds:       0.004422
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.004521
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.003496
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.003802
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5
random 10000 by 10000, nz: 199764, method 1 time 0.035 sec
number of nodes: 10000

method 5: vector assign and reduce:
BFS time in seconds:       0.005590
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 5: same but check each result
BFS time in seconds:       0.004088
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: apply unary operator
BFS time in seconds:       0.002941
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5

method 6: same but check each result
BFS time in seconds:       0.002749
nodes reachable from node 0: 10000 out of 10000
max BFS level: 5
random 100000 by 100000, nz: 19980358, method 0 time 4.949 sec
number of nodes: 100000

method 5: vector assign and reduce:
BFS time in seconds:       0.143493
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.153841
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.132163
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.150693
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4
random 100000 by 100000, nz: 19980358, method 1 time 4.249 sec
number of nodes: 100000

method 5: vector assign and reduce:
BFS time in seconds:       0.139923
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 5: same but check each result
BFS time in seconds:       0.139701
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: apply unary operator
BFS time in seconds:       0.139609
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4

method 6: same but check each result
BFS time in seconds:       0.129965
nodes reachable from node 0: 100000 out of 100000
max BFS level: 4
